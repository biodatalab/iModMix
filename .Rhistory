nodes <- as.data.frame(Integration_Data1_Data2$nodes)
edges <- as.data.frame(Integration_Data1_Data2$edges)
n <- Integration_Data1_Data2$n
shapes <- c("diamond", "triangle", "dot")
colors <- c("orange", "darkgreen", "darkblue")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation", shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
# Perform enrichment analysis per module
selected_database <- "GO_Biological_Process_2023"
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = hcData2$cluster_assignments,
database = selected_database)
View(hcData2)
View(hcData2[["cluster_assignments"]])
View(cluster_assig_Data2)
# Summarize into list the diffrent egenfuatures
eigengenes_list <- list(eigengenes_Data1, eigengenes_Data2)
cluster_list <- list(cluster_assig_Data1, cluster_assig_Data2)
Integration_Data1_Data2 <- Modules_correlation(eigengenes_list, cluster_list, threshold = 0.6)
TopCorrelations <-Integration_Data1_Data2[["Top_cor_Prot_metab"]]
head(TopCorrelations)
# Plot correlation
Correlation_Plot <- Integration_Data1_Data2$Correlation_Plot
hist(Correlation_Plot[[1]], main = "Correlation: Data 1 / Data 2 ")
#Plot Network
nodes <- as.data.frame(Integration_Data1_Data2$nodes)
edges <- as.data.frame(Integration_Data1_Data2$edges)
n <- Integration_Data1_Data2$n
shapes <- c("diamond", "triangle", "dot")
colors <- c("orange", "darkgreen", "darkblue")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation", shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = cluster_assig_Data2,
database = selected_database)
library(enrichR)
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = cluster_assig_Data2,
database = selected_database)
View(cluster_assignments_Data2_enrich)
cluster_assignments_Data2_enrich[1:5,]
# Perform enrichment analysis per module
selected_database <- "GO_Biological_Process_2023"
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = cluster_assig_Data2,
database = selected_database)
View(cluster_assignments_Data2_enrich)
View(cluster_assignments_Data2_enrich)
cluster_assignments_Data2_enrich[1:5,]
View(cluster_assignments_Data2_enrich)
runApp()
runApp()
library(iModMix)
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
detach("package:iModMix", unload = TRUE)
library(iModMix)
# Load the package
library(iModMix)
# Get the path to the expression data file
path_Metab_exp <- system.file("Example_data/ccRCC4_Data/Metab_exp.rds", package = "iModMix")
# Load the expression data
Data_exp1 <- readRDS(path_Metab_exp)
# Check the expression data
Data_exp1[1:5, 1:5]
# Get the path to the Metadata file
path_Metadata <- system.file("Example_data/ccRCC4_Data/Metadata.rds", package = "iModMix")
# Load the Metadata
Metadata <- readRDS(path_Metadata)
# Check the Metadata
head(Metadata)
# Preprocess de data in the format require for iModMix
load_data1 <- load_data(Data_exp1)
load_data1[1:5, 1:5]
# Perform Partial correlation
parcorData1 <- partial_cors(load_data1, rho = 0.25)
parcorData1[1:5, 1:5]
# Perform hierarchical clustering
hcData1 <- hierarchical_cluster(parcor_mat = parcorData1, tom = TRUE, min_module_size = 10)
hcClu = hcData1$hclustTree
hcMod = as.matrix(hcData1$dynamicMods_numeric)
WGCNA::plotDendroAndColors(dendro = hcClu,
colors = hcMod,
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
groupLabels = "Modules",
main = "Feature dendrogram and module assignments")
# Perform cluster assignments
cluster_assig_Data1 <- cluster_assignments(as.data.frame(hcData1$cluster_assignments))
head(cluster_assig_Data1)
# Obtain Eigenfeatures
eigenData1 <- Eigengenes(load_data1, hcData1$cluster_assignments[,3])
eigengenes_Data1 <- eigenData1$module_eigenmetab_Me
eigengenes_Data1[1:5, 1:5]
# Get the path to the expression data file
path_RNA_exp <- system.file("Example_data/ccRCC4_Data/RNA_exp.rds", package = "iModMix")
# Load the expression data
Data_exp2 <- readRDS(path_RNA_exp)
Data_exp2 <- Data_exp2[1:1000,]
# Check the expression data
Data_exp2[1:5, 1:5]
#Preprocess de data in the format require for iModMix
load_data2 <- load_data(Data_exp2)
# Perform hierarchical clustering
hcData2 <- hierarchical_cluster(parcor_mat = parcorData2, tom = TRUE, min_module_size = 10)
# Access the hierarchical clustering tree and module assignments
hcClu2 <- hcData2$hclustTree
hcMod2 <- as.matrix(hcData2$dynamicMods_numeric)
# Plot the dendrogram
WGCNA::plotDendroAndColors(dendro = hcClu2,
colors = hcMod2,
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
groupLabels = "Modules",
main = "Feature dendrogram and module assignments")
# Perform cluster assignment
cluster_assig_Data2 <- cluster_assignments(as.data.frame(hcData2$cluster_assignments))
eigenData2 <- Eigengenes(load_data2, hcData2$cluster_assignments[,3])
eigengenes_Data2 <- eigenData2$module_eigenmetab_Me
eigengenes_Data2[1:5, 1:5]
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
detach("package:iModMix", unload = TRUE)
library(iModMix)
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
runApp()
runApp()
runApp()
devtools::check()
devtools::build_vignettes()
devtools::check()
runApp()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
shiny::runApp()
devtools::check()
runApp()
runApp()
runApp()
runApp()
devtools::check()
runApp()
devtools::check()
runApp()
library(enrichR)
runApp()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
runApp()
devtools::check()
devtools::check()
BiocCheck::BiocCheck('new-package'=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocManager::install("BiocCheck")
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::document()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
shiny::runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
runApp()
runApp()
devtools::document(
)
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::document()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
shiny::runApp()
runApp()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
library(enrichR)
runApp()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
shiny::runApp()
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
styler::style_file("vignettes/iModMixTutorial.Rmd")
install.packages("styler")
library(styler)
styler::style_file("vignettes/iModMixTutorial.Rmd")
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
?Partial_cors
pPartial_cors
?partial_cors
?iMOdMix
?iModMix
library(iModMix)
?iModMix
??iModMix
iModMix::partial_cors()
?iModMix::partial_cors()
?iModMix::partial_cors
list.files("/Users/4477823/iModMix/inst/Example_data/ccRCC4_Data", full.names = TRUE)
list.files("/Users/4477823/iModMix/inst/Example_data/FloresData_K_TK", full.names = TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::document()
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
metab_heatmap_plot = ComplexHeatmap::Heatmap(
as.data.frame(t(Eigengene1()$Eigengenes)), cluster_columns = FALSE, cluster_rows = TRUE,
row_title = "Eigenfeatures", column_title = "Samples", name = "Z-score",
heatmap_legend_param = list(title_position = "topleft", legend_direction = "vertical"),
show_row_names = FALSE, row_names_side = "left", row_names_gp = grid::gpar(fontsize = 8),
show_column_names = TRUE
)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
runApp()
runApp()
library(enrichR)
runApp()
runApp()
runApp()
browseVignettes("ExperimentHub")
browseVignettes("ExperimentHub")
shiny::runApp()
runApp()
library(enrichR)
runApp()
runApp()
ClusterAssigData1 <- read.csv("~/Downloads/imodmixccrcresults/ClusterAssigData1.csv")
View(ClusterAssigData1)
runApp()
saveRDS(datos, file = "/Users/4477823/iModMix/inst/Example_data/ccRCC4_Data/ClusterAssigData1.rds")
saveRDS(ClusterAssigData1, file = "/Users/4477823/iModMix/inst/Example_data/ccRCC4_Data/ClusterAssigData1.rds")
gtex_rnaseq_with_age_selected_features <- read.delim("~/Library/CloudStorage/OneDrive-MoffittCancerCenter/Archivos de Goecks, Jeremy - Goecks Lab/Projects/AnVIL_Galaxy/gtex_rnaseq_with_age_selected_features.tsv")
View(gtex_rnaseq_with_age_selected_features)
str(gtex_rnaseq_with_age_selected_features)
str(gtex_rnaseq_with_age_selected_features[,56:])
str(gtex_rnaseq_with_age_selected_features[,5600:5637])
devtools::document()
golem::document_and_reload()
devtools::check()
devtools::build_vignettes()
getwd()
file.create(DOCKERFILE)
file.create("DOCKERFILE")
shiny::runApp()
Q
runApp()
runApp()
runApp()
shiny::runApp()
isdebugged(Metab_annot)
runApp()
isdebugged(Metab_annot)
shiny::runApp()
rm(list = ls())
shiny::runApp()
shiny::runApp()
runApp()
devtools::test()
devtools::test()
devtools::test()
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#'
#' @return A Shiny application object that launches the iModMix interface.
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
)
{  with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
runApp()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
runApp()
runApp()
devtools::test()
devtools::test()
rm(list = c("run_app"))
shiny::runApp()
rm(list = c("run_app"))
devtools::test()
devtools::test()
devtools::test()
rm(list = c("run_app"))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
shiny::runApp()
devtools::test()
runApp()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
shiny::runApp()
devtools::document()
shiny::runApp()
devtools::document()
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::clean_dll()
devtools::build(clean = TRUE)
devtools::check()
devtools::clean_dll()
devtools::build(clean = TRUE)
devtools::check()
BiocCheck::BiocCheck('new-package'=TRUE)
unlink("iModMix.Rcheck", recursive = TRUE)
unlink("iModMix_0.99.0.tar.gz")
devtools::build(clean = TRUE)
files <- list.files("inst/Example_data", recursive = TRUE, full.names = TRUE, pattern = "\\.rds$")
sizes <- file.info(files)$size / (1024^2)
files
sizes
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::build(clean = TRUE)
files <- list.files("inst/Example_data", recursive = TRUE, full.names = TRUE, pattern = "\\.rds$")
for (f in files) {
message("Re-saving: ", f)
obj <- readRDS(f)
saveRDS(obj, f, version = 2)  # <--- re-guardar en formato compatible
}
runApp()
devtools::build(clean = TRUE)
BiocCheck::BiocCheck("iModMix_0.99.0.tar.gz")
BiocCheck::BiocCheck('new-package'=TRUE)
list.files("inst/Example_data", recursive = TRUE, full.names = TRUE, pattern = "PartialCor")
unlink("iModMix.Rcheck", recursive = TRUE)
unlink("iModMix_0.99.0.tar.gz")
devtools::build(clean = TRUE)
BiocCheck::BiocCheck("iModMix_0.99.0.tar.gz", new="package")
BiocCheck::BiocCheck("/Users/4477823/iModMix_0.99.0.tar.gz", new = TRUE)
runApp()
shiny::runApp()
BiocCheck::BiocCheck("/Users/4477823/iModMix_0.99.0.tar.gz", new = TRUE)
